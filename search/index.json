[{"content":"ICONFINDER ICONFINDER 여러 아이콘을 검색해서 찾을 수 있다. 유료도 있지만 무료도 사용가능하다. pixabay pixabay 여러 이미지를 찾을 수 있다. 무료 사용 가능.\n","date":"2023-01-26T12:47:29+09:00","permalink":"https://insightous.github.io/p/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%BE%B8%EB%AF%B8%EA%B8%B0-%EB%A6%AC%EC%86%8C%EC%8A%A4/","title":"블로그 꾸미기 리소스"},{"content":"Linux CentOS 7 환경에서 작업.\nDocker 설치 Docker Engine install\n이전 버전 제거 1 2 3 4 5 6 7 8 sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine repository 설치 1 2 3 4 5 sudo yum install -y yum-utils sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo docker 설치 1 sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin 참고: Uninstall Docker Engind\n1 2 3 sudo yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin sudo rm -rf /var/lib/docker sudo rm -rf /var/lib/containerd Docker 실행 Docker 실행 1 sudo systemctl start docker 확인 1 sudo systemctl status docker 관리자(user)를 docker 그룹에 추가하기 관리자(user)가 docker 그룹에 속해야 한다. 그렇지 않으면 permission denied 발생. 1 sudo usermod -aG docker $USER 바로 적용되지 않고, exit후, 재접속하면 적용된다. 현재 유저가 속한 그룹들 확인: docker가 있는지 확인 1 id -nG Docker 확인 1 docker version Docker Compose 설치 Docker Compose install\n다운로드 1 sudo curl -L https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose 실행 권한 부여 1 sudo chmod +x /usr/local/bin/docker-compose 확인 1 docker-compose --version ","date":"2022-07-04T10:07:39+09:00","permalink":"https://insightous.github.io/p/docker-docker-compose-%EC%84%A4%EC%B9%98/","title":"Docker, Docker Compose 설치"},{"content":"CentOS 7에서 작업\nPercona MySQL 내가 알기로는 MySQL이 Oracle로 합병되면서 개발자들 중, 기술적인 부분, 최적화 관련 부분의 개발자가 나와서 설립했다.\n중요한 부분은 MySQL 8 버전을 오픈소스로 이용 가능하다는 것이다.\nPercona MySQL\nPercona MySQL 설치 yum repository를 사용해서 설치한다.\n설치 페이지\n1 2 3 sudo yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm sudo percona-release setup ps80 sudo yum install percona-server-server 참고: uninstall\n1 2 3 4 sudo service mysql stop sudo yum remove percona-server* rm -rf /var/lib/mysql rm -f /etc/my.cnf MySQL 실행 1 sudo service mysql start 관리할 디렉토리/파일 my.cnf: MySQL 설정 파일. 보통 /etc/my.cnf에 있다. 잘 모를 땐 찾기:find / -name \u0026quot;my.cnf\u0026quot; mysql: 데이터가 저장되고 있는 디렉토리. my.cnf 파일에 명시되어 있는 디렉토리에 있다. 보통 /var/lib/mysql에 저장되고 있다. mysqld.log: MySQL의 기본 로그 파일. 보통 /var/log/mysqld.log에 있다. MySQL 접속 yum을 통해 설치했기 때문에 초기 비밀번호가 자동으로 설정된다.\n이 비밀번호를 찾아야 한다.\n임시 비밀번호 확인 1 2 \u0026gt; grep \u0026#34;temporary password\u0026#34; /var/log/mysqld.log 2022-06-30T08:49:35.323255Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: FUltwuRPV2-. 접속 1 2 [temp@test mysql]$ mysql -u root -p Enter password: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 9 Server version: 8.0.28-20 Copyright (c) 2009-2022 Percona LLC and/or its affiliates Copyright (c) 2000, 2022, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. mysql\u0026gt; 처음 접속하면 root 계정의 비밀번호를 변경해야 다른 작업을 할 수 있다. 1 2 mysql\u0026gt; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;password\u0026#39;; Query OK, 0 rows affected (0.01 sec) password 정책이 있다. 외부 클라이언트에서 접속 MySQL이 설치된 서버의 외부에서 클라이언트로 연결할 경우. 계정 생성과 리눅스 방화벽 설정을 해야 한다.\n계정 생성 생성 전, 1 2 3 4 5 6 7 8 9 10 mysql\u0026gt; SELECT user, host FROM mysql.user; +------------------+-----------+ | user | host | +------------------+-----------+ | mysql.infoschema | localhost | | mysql.session | localhost | | mysql.sys | localhost | | root | localhost | +------------------+-----------+ 4 rows in set (0.00 sec) 생성 후, 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mysql\u0026gt; CREATE USER \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;password\u0026#39;; Query OK, 0 rows affected (0.01 sec) mysql\u0026gt; GRANT SUPER ON *.* TO \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39;; Query OK, 0 rows affected, 1 warning (0.01 sec) mysql\u0026gt; SELECT user, host FROM mysql.user; +------------------+-----------+ | user | host | +------------------+-----------+ | root | % | | mysql.infoschema | localhost | | mysql.session | localhost | | mysql.sys | localhost | | root | localhost | +------------------+-----------+ 5 rows in set (0.00 sec) 방화벽 설정 1 2 3 4 [temp@test ~]$ sudo firewall-cmd --permanent --add-port=3306/tcp success [temp@test ~]$ sudo firewall-cmd --reload success 참고: 블로그 Host PC(Windows 10)에서 접속\n","date":"2022-06-30T16:42:13+09:00","permalink":"https://insightous.github.io/p/percona-mysql-%EC%84%A4%EC%B9%98/","title":"Percona MySQL 설치"},{"content":"windows 10 환경에서 작업.\nVirtualBox 설치 VirtualBox는 Windows 환경에서 다른 운영체제를 사용할 수 있게 해주는 소프트웨어이다.\n설치: VirtualBox install\nCentOS7 이미지 다운로드 CentOS 다운로드 페이지\n본인의 pc 환경에 맞게 선택 \u0026gt; 여러 다운로드 링크\n주로 CentOS-7-x86_64-Minimal-2009.iso으로 설치\nCentOS 7 가상머신 생성 새로 만들기 \u0026gt; 이름,저장위치 설정. 종류: Linux. 버전: Red Hat(64-bit) \u0026gt; 메모리 설정 \u0026gt; 새 가상 하드 디스크 만들기 \u0026gt; VDI 선택 \u0026gt; 고정 크기 선택 \u0026gt; 만들기\n여러 설정들을 필요에 맞게 설정하면 된다\n이미지 선택 영어 선택\n네트워크 설정: 이 설정을 꼭 해야 편하게 인터넷 연결을 할 수 있다. 다른 설정을 알아서 하면 된다.\nBegin installation\nROOT PASSWORD와 USER CREATION 설정을 한다.\n네트워크 설정 출처: 코덕 개발자 노트 블로그\n내가 필요한 설정은 NAT 네트워크 설정이다.\nHost pc에서 가상머신으로 통신할 수 있어야 하고, 가상 머신 사이 통신이 가능해야 하고, 가상 머신에서 인터넷 통신이 가능해야 한다.(이 부분은 CentOS7 설치 과정에서 설정함으로써 기본 설정인 NAT이 되기 때문에 따로 설정할 필요 없다.) 먼저, 머신 \u0026gt; 설정 \u0026gt; 네트워크 \u0026gt; NAT 네트워크 설정을 한다.\n다음, 파일 \u0026gt; 환경 설정 \u0026gt; 네트워크 \u0026gt; NAT 네트워크 \u0026gt; 활성화 \u0026gt; 네트워크 편집 \u0026gt; 포트 포워딩 \u0026gt; 포트 설정\nHost PC(Windows 10)에서 가상 머신으로 접속할 때는 192.168.56.1 ip를 사용한다.\n가상머신이 여러 대인 경우: 포트를 다르게 설정해서 각 가상 머신에 접속한다. 이미지의 Rule 2, Rule 3 부분\n가상머신의 서비스(eg: MySQL) 접속할 경우. 포트 포워딩 설정을 해준다. 이미지의 Rule 4, Rule 5 부분\n가상 머신 사이에 통신은 각 머신에서 ifconfig를 통해 확인한 ip로 통신하게 된다. net-tools 설치하여 ifconfig를 사용할 수 있다.\n1 2 sudo yum install -y net-tools ifconfig 가상 머신 사이에서는 ifconfig 결과로 알 수 있는 inet주소로 통신한다. 참고: username을 sudoers에 추가\nroot로 전환 1 2 3 [temp@test ~]$ su Password: [root@test temp]# vi /etc/sudoers /etc/sudoers에 추가 1 2 3 ## Allow root to run any commands anywhere root ALL=(ALL) ALL username ALL=(ALL) ALL 네트워크 통신 확인 \u0026amp; ssh 접속 Host PC에서 가상 머신 접속: 위에서 포트 포워딩을 한 것을 참고하여 접속 1 2 3 4 PS C:\\Users\u0026gt; ssh temp@192.168.56.1 -p2223 temp@192.168.56.1\u0026#39;s password: Last login: Thu Jun 30 02:52:13 2022 from 192.168.56.1 [temp@test ~]$ 가상 머신 사이에서 통신: ping으로 확인 1 2 3 4 5 6 7 8 9 [temp@test ~]$ ping 10.0.2.5 PING 10.0.2.5 (10.0.2.5) 56(84) bytes of data. 64 bytes from 10.0.2.5: icmp_seq=1 ttl=64 time=1.16 ms 64 bytes from 10.0.2.5: icmp_seq=2 ttl=64 time=3.17 ms 64 bytes from 10.0.2.5: icmp_seq=3 ttl=64 time=0.647 ms ^C --- 10.0.2.5 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2004ms rtt min/avg/max/mdev = 0.647/1.660/3.171/1.089 ms 가상 머신을 복제해서 사용한 경우 가상 머신 ip가 똑같이 생성될 수 있다. 동적으로 ip를 설정하므로, reboot을 한 번 해주면 된다.\n","date":"2022-06-30T14:00:56+09:00","permalink":"https://insightous.github.io/p/virtualbox%EB%A1%9C-%EC%97%AC%EB%9F%AC%EB%8C%80%EC%9D%98-%EA%B0%80%EC%83%81%EB%A8%B8%EC%8B%A0centos7-%EC%83%9D%EC%84%B1%ED%95%98%EA%B3%A0-%ED%86%B5%EC%8B%A0-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/","title":"VirtualBox로 여러대의 가상머신(CentOS7) 생성하고, 통신 설정하기"},{"content":"상황 너무나도 잘 사용하고 있던 extension인 Bracket Pair Colorizer 2가 deprecated 되었다.\n이 extension은 각 괄호들의 짝을 색으로 구분하여 코드를 읽기 쉽게하는 기능이다.\ndeprecated 됨에 따라 기능을 대체할 방법을 찾아야 했다.\n검색 검색 결과 블로그를 발견했다.\n블로그\n적용 Settings\u0026gt;Workbench\u0026gt;Appearance\u0026gt;Color Customizations의 Edit in settings.json을 눌러 settings.json 파일을 연다. bracket pair coloring 기능 이외에도 Indentation guides colorization 기능도 추가해 준다. Panda Syntax는 테마이름이고 그에 해당하는 색 조합이다. 원하면 다른 테마를 선택해, 그 색조합을 설정하면 된다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026#34;workbench.colorCustomizations\u0026#34;: { \u0026#34;[Panda Syntax]\u0026#34;: { \u0026#34;editorBracketHighlight.foreground1\u0026#34;: \u0026#34;#E6E6E6\u0026#34;, \u0026#34;editorBracketHighlight.foreground2\u0026#34;: \u0026#34;#FF75B5\u0026#34;, \u0026#34;editorBracketHighlight.foreground3\u0026#34;: \u0026#34;#19f9d8\u0026#34;, \u0026#34;editorBracketHighlight.foreground4\u0026#34;: \u0026#34;#B084EB\u0026#34;, \u0026#34;editorBracketHighlight.foreground5\u0026#34;: \u0026#34;#45A9F9\u0026#34;, \u0026#34;editorBracketHighlight.foreground6\u0026#34;: \u0026#34;#FFB86C\u0026#34;, \u0026#34;editorBracketHighlight.unexpectedBracket.foreground\u0026#34;: \u0026#34;#FF2C6D\u0026#34;, \u0026#34;editorBracketPairGuide.background1\u0026#34;: \u0026#34;#FFB86C\u0026#34;, \u0026#34;editorBracketPairGuide.background2\u0026#34;: \u0026#34;#FF75B5\u0026#34;, \u0026#34;editorBracketPairGuide.background3\u0026#34;: \u0026#34;#45A9F9\u0026#34;, \u0026#34;editorBracketPairGuide.background4\u0026#34;: \u0026#34;#B084EB\u0026#34;, \u0026#34;editorBracketPairGuide.background5\u0026#34;: \u0026#34;#E6E6E6\u0026#34;, \u0026#34;editorBracketPairGuide.background6\u0026#34;: \u0026#34;#19f9d8\u0026#34;, \u0026#34;editorBracketPairGuide.activeBackground1\u0026#34;: \u0026#34;#FFB86C\u0026#34;, \u0026#34;editorBracketPairGuide.activeBackground2\u0026#34;: \u0026#34;#FF75B5\u0026#34;, \u0026#34;editorBracketPairGuide.activeBackground3\u0026#34;: \u0026#34;#45A9F9\u0026#34;, \u0026#34;editorBracketPairGuide.activeBackground4\u0026#34;: \u0026#34;#B084EB\u0026#34;, \u0026#34;editorBracketPairGuide.activeBackground5\u0026#34;: \u0026#34;#E6E6E6\u0026#34;, \u0026#34;editorBracketPairGuide.activeBackground6\u0026#34;: \u0026#34;#19f9d8\u0026#34;, } } 포스팅 하며.. 구글링이 답이다..\n","date":"2022-06-28T15:21:25+09:00","permalink":"https://insightous.github.io/p/vs-code%EC%9D%98-bracket-pair-colorizer-2%EA%B0%80-deprecated-%EB%90%98%EC%97%88%EB%8B%A4./","title":"VS Code의 `Bracket Pair Colorizer 2`가 deprecated 되었다."},{"content":"VS Code install VS Code 설치 페이지\nVS Code Run theme 적용 상태\nexplorer: 프로젝트의 파일 구조, 파일의 추가, 변경을 쉽게 확인할 수 있다. source control: 버전관리를 확인할 수 있다. Git과 연동. 사용하는 extensions list 검색 창을 이용해 필요한 extension을 설치, 제거, 관리할 수 있다. 현재는 github 아이디를 VS Code와 연동하여 extenstions가 자동 동기화 되는데,\n동기화 되지 않을 경우 extensions list를 생성해 다른 pc에서 설치할 수 있다.\nextensions.list 생성 1 code --list-extensions \u0026gt; extensions.list extensions.list로 설치 1 cat extensions.list |% { code --install-extension $_} 참고 페이지: 이로이로의 저장소 블로그 페이지\npowershell, cmd에서 실행하기 설치할 때, path 설정을 하면 자동으로 사용 가능. 설치시, path 설정을 하지 않은 경우: VS Code가 설치된 경로를 환경변수로 설정. 1 code 포스팅하며.. 주로 사용하는 언어가 Python이기 때문에 VS Code를 사용한다.\nJava와는 궁합이 좋지 않은 듯하다..\n","date":"2022-06-27T16:27:17+09:00","permalink":"https://insightous.github.io/p/vs-codevisual-studio-code%EB%A5%BC-editor%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/","title":"VS code(Visual Studio Code)를 editor로 사용하기"},{"content":"windows 10 환경에서 작업.\n댓글들을 관리할 GitHub repository 생성 public으로 생성한다. username/comment utterances GitHub App 설치 설치페이지: utterances GitHub App install\nrepository와 연결: 위에서 생성한 repository를 설정한다. utterances 설정 설정 페이지: utteranc.es 위의 설정들을 지정하면\n아래의 스크립트가 자동으로 생성된다. 이 스크립트를 필요한 곳에 붙여넣으면 된다.\n내 theme에서는 themes/theme-이름/layouts/partials/comments/provider/utterances.html이 있다\n다른 방법으로, 내 theme에서는 config.yaml의 다음 부분을 설정할 수 있다.\n1 2 3 4 5 6 7 8 9 params: comments: enabled: true provider: utterances utterances: repo: username/repository issueTerm: pathname label: ","date":"2022-06-27T11:24:37+09:00","permalink":"https://insightous.github.io/p/utterances%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%8C%93%EA%B8%80-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/","title":"utterances로 블로그 댓글 기능 추가하기"},{"content":"windows 10 환경에서 작업.\nclone 된 디렉토리를 submodule로 변경하는 방법 1 2 git rm --cached .\\themes\\hugo-theme-stack\\ git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 즉, clone해온 디렉토리의 git캐시를 지우고, submodule로 추가.\n.gitmodules 파일을 확인한다.\n","date":"2022-06-26T20:46:00+09:00","permalink":"https://insightous.github.io/p/clone-%EB%90%9C-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%EB%A5%BC-submodule%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/","title":"clone 된 디렉토리를 submodule로 변경하는 방법"},{"content":"windows 10 환겨에서 작업.\nsubmodule 추가하는 방법 1 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 즉,\n1 git submodule add submodule에-추가할-url submodule을-가져올-디렉토리 themes 디렉토리에 파일들이 생성된다.\n그리고 .gitmodules 파일이 생성되고, 여기에는 submodule의 정보를 가지고 있다.\n","date":"2022-06-26T20:37:00+09:00","permalink":"https://insightous.github.io/p/submodule-%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/","title":"submodule 추가하는 방법"},{"content":"windows 10 환경에서 작업.\n작업 배경 github.io 블로그를 구축하며, theme을 submodule로 추가하게 되었다. (관련 포스팅: Hugo, GitHub 블로그 구축 ) 이 과정에서 외부에서 가져온 submodule을 수정하게 되는데..\n이렇게 수정한 소스코드파일들을 remote repository에 관리할 수 없었다.\n물론 hugo로 build한 파일들은 문제 없이 관리/블로그 반영 할 수 있음. 블로그 구축 포스팅 참조\nremote repository로 관리 방법 검색 stack overflow에 나와 같은 문제를 가진 사람이 있어, 해결 방법을 찾았다.\nstack overflow 페이지\n작업 과정 먼저 submodule의 변경사항을 관리할 repository를 생성한다. 내 GitHub에서 myusername/hugo-theme-stack repository를 생성\nsubmodule 디렉토리에서 remote repository를 추가한다.\n1 2 3 4 5 6 \u0026gt; pwd ~/blog/themes/hugo-theme-stack \u0026gt; git remote rename origin caijimmy \u0026gt; git remote add origin git@github.com:myusername/hugo-theme-stack.git git remote -v로 remote repository 확인\n1 2 3 4 5 \u0026gt; git remote -v caijimmy https://github.com/CaiJimmy/hugo-theme-stack.git (fetch) caijimmy https://github.com/CaiJimmy/hugo-theme-stack.git (push) origin git@github.com:myusername/hugo-theme-stack.git (fetch) origin git@github.com:myusername/hugo-theme-stack.git (push) branch 생성\n1 git branch -M main git commit: 내가 변경할 파일들을 포함한 commit이 생성된다.\n1 git commit -m \u0026#34;message\u0026#34; 내 remote repository(git@github.com:myusername/hugo-theme-stack.git)에 push\n1 git push origin main blog 디렉토리에서 submodule의 url 변경: .gitmodules 파일의 theme 서브모듈을 참고해서 변경\n1 git submodule set-url themes/hugo-theme-stack git@github.com:myusername/hugo-theme-stack.git submodule 확인\n1 git submodule summary blog(remote repository)에 submodule 변경 사항 push\n포스팅하며.. 처음에 관련 자료가 없어서 영어로 검색 했었다.\n물론 안 되는 영어로 can i modify submodule of other person 이렇게 구글 검색.\n구글 서치 엔진이 잘 검색주어서 아래와 같은 결과를 얻을 수 있었고, 문제 해결할 수 있었다.\n잘 안 되는 영어라도 사용하려고 노력하자.\n영어 공부도 열심히 하자.\n","date":"2022-06-26T12:50:00+09:00","permalink":"https://insightous.github.io/p/%EC%99%B8%EB%B6%80-submodule%EC%9D%84-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B3%A0-remote-repository%EB%A1%9C-%EA%B4%80%EB%A6%AC/","title":"외부 submodule을 변경하고 remote repository로 관리"},{"content":"windows 10 환경에서 작업.\nSSH 키를 생성해준다. GitHub-Generate new SSH key을 참고한다.\nPowerShell에서도 작업 가능하다.\n1 ssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; -f \u0026#34;.ssh/filename\u0026#34; ed25519는 암호화 알고리즘 중 하나이다. 보통 rsa알고리즘을 사용한다. 보통 C:\\Users\\username\\.ssh 디렉토리를 생성에 이 곳에 파일들을 저장한다.\n리눅스에서는 자동으로 /home/username/.ssh 디렉토리가 자동 생성되고 이 곳에 파일을 저장됐던 것 같다 설정한 디렉토리에 filename과 filename.pub 두 파일이 생성된다. filename이 private키 이고, filename.pub이 public키 이다. private 키, public 키 설명: 위키피디아: 공개키 암호방식 이미지 GitHub에 public키를 저장 Settings \u0026gt; SSH and GPG keys \u0026gt; SSH keys \u0026gt; New SSH key\n식별하기 위한 Title을 지정하고, public키 파일을 열어 내용을 복사 붙여넣기 한다. GitHub을 여러 계정 사용하는 경우 각 GitHub에 위의 과정을 각각 진행한다. 두 계정은 다른 키 파일들을 사용해야 한다. 같은 파일 사용하려 했지만 GitHub에 등록되지 않는다. GitHub에서 unique 검증을 하는 것이라고 추측중 ssh config 설정 C:\\Users\\username\\.ssh 디렉토리에 config 파일을 생성한다. 확장자는 없다 1 2 3 4 5 6 7 8 9 10 11 # Default GitHub username1 Host github.com HostName github.com IdentityFile ~./ssh/filename1 User git # username2 Host github.com-username2 HostName github.com IdentityFile C:\\Users\\username\\.ssh\\filename2 User git Host를 다르게 설정, 식별가능하게 함. HostName은 접속하려는 host를 작성. IdentityFile은 ssh 접속시 사용하는 private 파일을 설정. ssh config 설정을 기반으로 프로세스 이해 git remote나 git clone을 할 경우\nDefault로 설정한 git config의 Host 때문에 git@github.com:username1/repo.git로 remote/clone을 하면 된다. username2에서는 git config의 Host 때문에 git@github.com-username2:username2/repo.git로 remote/clone 하면 된다. 즉, remote/clone 시 사용하는 주소를 통해 -\u0026gt; ssh config 파일을 바탕으로 -\u0026gt; 접속 방법을 설정하게 된다.\n참고 사이트\nsonypark.log님의 블로그\n","date":"2022-06-17T16:24:29+09:00","permalink":"https://insightous.github.io/p/ssh%EB%A1%9C-github-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0/","title":"ssh로 GitHub 연결하기"},{"content":"windows 10 환경에서 작업.\nHugo Hugo는 Static Site Generators 중 하나이고 Go lang으로 작성되어 있다. Hugo를 선택한 이유는 Go lang으로 되어 있기 때문이다.\n공식 사이트: Hugo\nHugo 설치 공식 설치 문서 Hugo install-Windows을 참고해서 설치를 진행한다.\n다운로드 저장소 Hugo Release에서 본인 pc 설정에 맞는 버전을 다운로드 한다.\n문서에는 특정 경로에 설치할 것을 추천하지만 어떤 경로든 상관 없을것 같다\n내가 선택한 theme이 extended 버전을 필요로하는 경우가 있다 가장 중요한 것은 환경 변수 설정을 해주는 것이다.\n문서 Hugo install-Windows-set-variables 참고한다. hugo 설치 확인 1 2 \u0026gt; hugo version hugo v0.100.2 GitHub, Git GitHub 가입 \u0026amp; repository 생성 GitHub 가입한다. GitHub Repository 2개 생성 username/blog: 블로그 프로젝트 소스코드가 저장될 저장소. username/username.github.io: 실제 블로그가 운영될 저장소. 이 저장소 기반으로 블로그가 운영된다. 이 저장소에 저장하는 것으로 블로그 배포된다고 볼 수 있음.\n\u0026lsquo;username.github.io\u0026rsquo; 저장소는 public으로 설정한다. private 저장소로 지정했었는데, 안 됐었던 경험이 있다. 이유는 접근권한이 private이라서 라고 추측하는 중. Git 설치 Git 공식 사이트: Git\ngit cli(command line interface)로 git을 명령어를 이용해서 git을 사용하게 해준다.\n본인 pc 설정에 맞는 버전 설치\nGit 설치 확인 1 2 \u0026gt; git version git version 2.31.1.windows.1 hugo blog 생성 Hugo quickstart를 참고한다.\nhugo로 블로그 사이트(프로젝트에 해당)를 생성한다. 1 \u0026gt; hugo new site blog blog로 작업디렉토리를 변경 후, git 로컬저장소로 초기화한다. 1 2 3 \u0026gt; cd blog \u0026gt; git init Initialized empty Git repository in C:/Users/blog/.git/ hugo theme을 clone하여, 변경사항을 remote repository로 관리하는 방법 Hugo-themes에서 원하는 테마를 고른다. 고른 테마의 문서도 잘 읽어본다 hugo-theme을 submodule로 추가할 경우: submodule 추가하는 방법 hugo theme을 clone 1 git clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack theme의 변경 사항을 관리할 repository를 생성: myusername/hugo-theme-stack submodule 디렉토리에서 remote repository를 추가한다. 1 2 3 4 5 6 \u0026gt; pwd ~/blog/themes/hugo-theme-stack \u0026gt; git remote rename origin caijimmy \u0026gt; git remote add origin git@github.com:myusername/hugo-theme-stack.git git remote -v로 remote repository 확인 1 2 3 4 5 \u0026gt; git remote -v caijimmy https://github.com/CaiJimmy/hugo-theme-stack.git (fetch) caijimmy https://github.com/CaiJimmy/hugo-theme-stack.git (push) origin git@github.com:myusername/hugo-theme-stack.git (fetch) origin git@github.com:myusername/hugo-theme-stack.git (push) branch 생성 1 git branch -M main 내가 관리하는 theme(myusername/hugo-theme-stack)에 변경사항을 add/commit/push 한다. 1 2 3 git add . git commit -m \u0026#34;commit message.\u0026#34; git push origin main blog 디렉토리에서 내가 관리하는 theme(myusername/hugo-theme-stack)을 submodule로 추가한다. 1 git submodule add https://github.com/myusername/hugo-theme-stack/ themes/hugo-theme-stack hugo theme을 submodule로 추가했는데, 변경하고 싶을 경우: 외부 submodule을 변경하고 remote repository로 관리 username.github.io 저장소를 submodule로 추가 public 디렉토리를 먼저 삭제 한다. public으로 username.github.io 저장소를 클론해오는데 디렉토리가 이미 존재할 경우 정상 동작하지 않는다. username.github.io submodule 추가시에는 꼭 ssh 주소를 사용해야 한다. -\u0026gt; https로 클론할 경우 당장 에러가 발생하지 않지만, 블로그를 접속시 404에러가 발생한다. GitHub ssh 클론에 필요한 방법: ssh로 GitHub 연결 \u0026amp; 여러 계정 사용 username.github.io submodule은 main branch를 설정해서 submodule을 추가한다. (작업을 push 할 예정이므로 branch 설정) 1 git submodule add -b main git@github.com:username/username.github.io.git public remote repository가 빈 repository 라서, 에러가 발생한다. .gitmodules파일을 확인하면 submodule이 추가되지 않은 것을 확인할 수 있다. public 디렉토리로 이동하여 git remote -v로 원격 저장소(여기서는 username.github.io)로 remote를 확인할 수 있다. README.md 파일을 생성하고 add/commit/push 하여 빈 repository 상태를 벗어나게 해준다. 1 2 3 4 5 6 cd public git remote -v echo \u0026#34;# username.github.io\u0026#34; \u0026gt;\u0026gt; README.md git add README.md git commit -m \u0026#34;first commit\u0026#34; git push -u origin main 로컬 repository main 브랜치에서 remote repository origin 브랜치로 push 해준다. 즉 로컬에서 작업하는 브랜치는 main이 된다. 다시 blog 디렉토리로 돌아와 username.github.io를 submodule로 추가해준다. 1 2 cd .. git submodule add -b main git@github.com:username/username.github.io.git public .gitmodules파일을 확인하여 submodule이 추가된 것을 확인한다. GitHub blog remote repository 연결 repository를 생성하면 처음 나오는 Quick setup을 참고하자\nblog 디렉토리(프로젝트)에서 작업할 branch로 main을 설정해준다 1 git branch -M main 로컬 저장소 blog와 blog remote repository 연결해준다. 1 git remote add origin git@github.com:username/blog.git https 연결로 가능하지만 위에서 ssh 연결 설정을 이미 해두어 ssh로 연결해준다 포스팅할 글을 작성해준다. hugo quick-start 추천 방법 1 hugo new posts/my-first-post.md 보통 themes/내가-선택한-테마/exampleSite에 많은 예시 문서들이 있다. 이를 참고해서 문서 작성한다. GitHub에 올리기 전에 확인 1 hugo server -D build 후, GitHub으로 배포 build: 아래 명령을 실행하면 public에 파일들이 생성된다. 1 hugo -t themes-아래-테마이름 GitHub으로 배포: 먼저 submodule로 연결한 username.github.io로 add/commit/push를 해준다. 1 2 3 4 cd public git add . git commit -m \u0026#34;first build\u0026#34; git push origin main GitHub으로 배포: 소스코드를 원격 저장소 blog로 add/commit/push 해준다. 1 2 3 4 cd .. git add . git commit -m \u0026#34;first build\u0026#34; git push origin main username.github.io로 접속하여 확인 시간이 좀 걸릴 수 있으니 조금 여유를 가지고 확인하자.\n블로그를 구축하며\u0026hellip; 블로그를 구축하면서 GitHub에 대해 더 공부할 수 있는 시간이었다. 공식문서의 중요성을 다시 한번 느낄 수 있었다.-\u0026gt; 영어 공부 열심히 해서 공식문서 읽는데 어려움이 없게 하자. 남은 작업\nscripts로 배포 자동화하기 댓글 기능 추가하기: utterances로 블로그 댓글 기능 추가하기 참고 사이트\nhttps://github.com/Integerous/Integerous.github.io#readme\n","date":"2022-06-16T17:20:29+09:00","permalink":"https://insightous.github.io/p/hugo-github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%B6%95/","title":"Hugo, GitHub 블로그 구축"}]